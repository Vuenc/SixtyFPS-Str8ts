/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2021 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2021 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

// import { Button } from "sixtyfps_widgets.60";

struct Cell := {
    // col/row position of the tile in the puzzle
    pos-x: int,
    pos-y: int,
    index: int,
    value: int,
    small-values: [bool],
    is-white: bool,
    is-fixed: bool,
    is-editing: bool,
    is-valid-in-row: bool,
    is-valid-in-straight: bool
}

struct Theme := {
    name: string,
    window-background-color: brush,
    game-background-color: brush,
    game-use-background-image: bool,
    game-border: length,
    game-radius: length,
    game-text-color: color,
    game-highlight-color: color,
    piece-border: length,
    piece-background-1: brush,
    piece-background-2: brush,
    piece-border-color-1: brush,
    piece-border-color-2: brush,
    piece-text-color-1: color,
    piece-text-color-2: color,
    piece-text-weight-fixed-value: int,
    piece-text-weight-nonfixed-value: int,
    piece-text-font-family: string,
    piece-radius: length,
    /// Ratio of the piece size
    piece-spacing: float,
    cells-outer-border: length,
}



Checkbox := Rectangle {
    property <bool> checked;
    callback toggled(bool);
    property<color> checked-color;
    property<color> unchecked-color;

    hover-rect := Rectangle {
        background: #f5f5f5;
        x: - parent.width / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
        height: self.width;
        border-radius: width;
    }

    checkbox-rect := Rectangle {
        border-width: height * 10%;
        border-color: unchecked-color;
        border-radius: 2px;

        clip := Rectangle {
            width: 0px;
            clip: true;

            Text {
                width: root.width;
                height: root.height;

                text: "âœ“";
                font-size: height * 80%;
                color: white;
                animate color { duration: 200ms; }
                vertical-alignment: center;
                horizontal-alignment: center;
            }
        }
        ta := TouchArea {
            clicked => {
                checked = !checked;
                root.toggled(checked);
            }
        }

    }

    states [
       /* pressed when ta.pressed : {
            clip.width: root.width;
            root.border-color: checked_color;
            root.border-width: root.width;
        }*/
        checked when root.checked : {
            clip.width: root.width;
            checkbox-rect.border-color: checked-color;
            checkbox-rect.border-width: root.width;
        }
    ]
    transitions [
        in checked : {
            animate clip.width { duration: 200ms; easing: ease-in; }
            animate checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
        }
        out checked : {
            animate clip.width { duration: 100ms; easing: ease; }
            animate checkbox-rect.border-width { duration: 200ms; easing: ease-in-out; }
            animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
        }

    ]
}

Button := Rectangle {
    callback clicked();
    property<color> button-color;
    property<string> button-text;
    property<int> button-font-weight: 400;
    property<float> button-font-size-percentage: 80%;
    property<bool> is-activated;
    property<color> hover-color: #f5f5f5;
    property<color> activated-color: #f0f2a4;

    hover-rect := Rectangle {
        background: ta.has-hover ? hover-color : activated-color;
        x: - (width - parent.width) / 2;
        y: - (height - parent.height) / 2;
        property <length> hover-additional-border: 15% * min(root.width, root.height);
        width: ta.has-hover ? root.width + hover-additional-border : is-activated ? root.width : 0px;
        height: ta.has-hover ? root.height + hover-additional-border : is-activated ? root.height : 0px;
        border-radius: 10% * height;
    }

    checkbox-rect := Rectangle {
        border-width: height * 5%;
        border-color: button-color;
        border-radius: 2px;

        Text {
            width: parent.width;
            height:  parent.height * 80%;
            x: parent.width / 2 - width / 2;
            y: parent.height * 10%; //parent.height / 2 - height / 2;
            font-weight: button-font-weight;

            text: button-text;
            font-size: height * button-font-size-percentage;
            color: black;
            animate color { duration: 200ms; }
            vertical-alignment: center;
            horizontal-alignment: center;
        }
        ta := TouchArea {
            clicked => {
                root.clicked();
            }
        }
    }
}

// import "./plaster-font/Plaster-Regular.ttf";
// import "./Cantarell/Cantarell-Bold.ttf";
// import "./Cantarell/Cantarell-Regular.ttf";

export MainWindow := Window {
    title: "Str8ts Puzzle - SixtyFPS Demo";

    callback piece-clicked(int);
    callback cell-key-pressed(int, KeyEvent);
    callback reset();
    callback enable-auto-mode(bool);
    callback set-mode(string);
    callback solve-puzzle();
    callback save-game();
    callback generate-puzzle();
    property <bool> auto-play;
    property <int> moves;
    property <int> tiles-left;
    property <string> mode: "none"; // "none", "edit-black-white", "edit-fixed-numbers", "play-enter-numbers", "play-enter-small-numbers"
    property <[Cell]> cells: [];
    property <bool> was-just-solved;

    // default-font-family: "Cantarell";

    property <[Theme]> themes: [];

    property<int> current-theme-index: 1;

    // FIXME: themes[current-theme-index]
    property <Theme> current-theme: {
        name: "SIMPLE",
        window-background-color: #ffffff,
        game-background-color: #ffffff,
        game-use-background-image: false,
        game-border: 2px,
        game-radius: 2px,
        game-text-color: #858585,
        game-highlight-color: #1d6aaa,
        piece-border: 1px,
        piece-background-1: #0d579b,
        piece-background-2: #0d579b,
        piece-border-color-1: #0a457b,
        piece-border-color-2: #0a457b,
        piece-text-color-1: #ffffff,
        piece-text-color-2: #ffffff,
        piece-text-weight-fixed-value: 700,
        piece-text-weight-nonfixed-value: 550,
        piece-radius: 5px,
        piece-text-font-family: default-font-family,
        /// Ratio of the piece size
        piece-spacing: 0%,
        cells-outer-border: 1px,
    };

    property<length> pieces-size: min(width, height) / 13;
    property<length> pieces-spacing: current-theme.game-use-background-image && tiles-left == 0 ?
        2px : (pieces-size * current-theme.piece-spacing);

    animate pieces-spacing { duration: 500s; easing: ease-out; }

    Rectangle {
        background: current-theme.window-background-color;
        animate background { duration: 500ms; easing: ease-out; }
    }

    Rectangle {
        background: current-theme.game-background-color;
        border-color: current-theme.game-text-color;
        border-width: current-theme.game-border;
        border-radius: current-theme.game-radius;
        width: pieces-size * 10.35;
        height: pieces-size * 12;
        x: (parent.width - width)/2;
        y: (parent.height - height)/2;
        animate background, border-color, border-width, border-radius { duration: 500ms; easing: ease-out; }

        Rectangle {
            x: (parent.width - width)/2;
            y: (parent.height - height)/2;
            width: 9*pieces-size + 8*pieces-spacing + 2*current-theme.cells-outer-border;
            height: width;
            border-width: current-theme.cells-outer-border;
            border-color: #000000;

            Rectangle {
                x: current-theme.cells-outer-border;
                y: current-theme.cells-outer-border;
                width: parent.width - 2*current-theme.cells-outer-border;
                height: parent.height - 2*current-theme.cells-outer-border;
                background: #000000;

                for p[i] in cells : Rectangle {
                    x: py * (pieces-size + pieces-spacing);
                    y: px * (pieces-size + pieces-spacing);
                    width: pieces-size;
                    height: pieces-size;
                    property <bool> is-correct: i == p.pos-x * 4 + p.pos-y;

                    drop-shadow-offset-x: 1px;
                    drop-shadow-offset-y: 1px;
                    drop-shadow-blur: 3px;
                    drop-shadow-color: #00000040;
                    border-radius: 0; //current-theme.piece-radius;
                    clip: true;

                    property<float> px: p.pos-x;
                    property<float> py: p.pos-y;
                    animate px , py { duration: 170ms; easing: cubic-bezier(0.17,0.76,0.4,1.75); }

                    property<string> value: p.value > 0 ? p.value : "";

                    Rectangle {
                        // background: i >= 8 ? current-theme.piece-background-2 : current-theme.piece-background-1;
                        background: #ff00ff;
                        border-color: #000000;
                        border-width: current-theme.piece-border;
                        border-radius: 0;
                        animate border-width, border-radius { duration: 500ms; easing: ease-out; }

                        states [ 
                            was-just-solved when root.was-just-solved && p.is-white : {
                                background: #99fb99;
                            }
                            is-editing when p.is-editing : {
                                background: p.is_white ? #f0f2a4 : #535339;
                            }
                            is-invalid-in-straight when !p.is-valid-in-straight : {
                                background: #ff5c5c;
                            }
                            is-white when p.is-white : {
                                background: #ffffff;
                            }
                            is-black when !p.is-white : {
                                background: #000000;
                            }
                        ]

                        transitions [ 
                            in was-just-solved: {
                                animate background { duration: 400ms; easing: ease-in; }
                            }
                            out was-just-solved: {
                                animate background { duration: 200ms; easing: ease-out; }
                            }
                            in is-invalid-in-straight : { animate background { duration: 40ms; } }
                            in is-editing : { animate background { duration: 40ms; } }
                            in is-white : { animate background { duration: 100ms; easing: ease-in-out;  } }
                            in is-black : { animate background { duration: 100ms; easing: ease-in-out; } }
                        ]
                    }

                    Text {
                        text: value;
                        color: !p.is-valid-in-row ? #df0000 : p.is-white ? #000000 : #ffffff;
                        font-size: pieces-size / 3;
                        font-weight: p.is-fixed ? current-theme.piece-text-weight-fixed-value : current-theme.piece-text-weight-nonfixed-value;
                        font-family: current-theme.piece-text-font-family;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                        width: 100%;
                        height: 100%;
                        animate color { duration: 200ms; }
                    }

                    for small-val[j] in p.small-values : Rectangle {
                        if value <= 0 && small-val: Text {
                            text: j+1;
                            font-size: pieces-size / 6;
                            font-family: current-theme.piece-text-font-family;
                            x: (parent.width / 3) * mod(j, 3);
                            y: (parent.height / 3) * floor(j / 3);
                            width: parent.width / 3;
                            height: parent.height / 3;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                        }
                    }

                    touch := TouchArea {
                        clicked => { root.piece-clicked(i); }
                    }

                    FocusScope {
                        has-focus: p.is-editing;
                        key-pressed(e) => { root.cell-key-pressed(i, e); accept }
                    }

                    shadow := Rectangle {
                        circle := Rectangle {
                            height: width;
                            border-radius: width/2;
                            background: #0002;
                            x: touch.pressed-x - width/2;
                            y: touch.pressed-y - width/2;
                        }
                    }

                    states [
                        pressed when touch.pressed : {
                            shadow.color: #0002;
                            circle.width: shadow.width * 2 * 1.4142;
                        }
                        hover when touch.has-hover: {
                            shadow.color: #0000000d;
                        }

                    ]
                    transitions [
                        in pressed : {
                            animate shadow.color { duration: 50ms; }
                            animate circle.width { duration: 2s; easing: ease-out; }
                        }
                        out pressed : {
                            animate shadow.color { duration: 50ms; }
                        }
                    ]
                }
            }
        }

        HorizontalLayout {
            height: pieces-size;
            y: parent.height - pieces-size;
            width: parent.width;
            padding: height * 25%;
            spacing: 10px;
            Text {
                text: " â†» ";
                font-size: parent.height * 40%;
                color: current-theme.game-highlight-color;
                vertical-alignment: center;
                TouchArea {
                    clicked => { root.reset(); }
                }
            }
            Text { 
                text: " Edit: ";
                font-size: parent.height * 40%;
                // font-size: parent.height;
            }
            Button { 
                button-color: current-theme.game-text-color;
                is-activated: mode == "edit-black-white";
                clicked => { 
                    mode = "edit-black-white";
                    root.set-mode(mode);  
                }
                property<length> square-size: min(width, height) * 45%;
                Rectangle {
                    width: parent.square-size;
                    height: parent.square-size;
                    background: black;
                    x: parent.width * 45% - parent.square-size;
                    y: parent.height * 45% - parent.square-size / 2;
                    border-color: #000000;
                    border-width: current-theme.piece-border;
                }
                Rectangle {
                    width: parent.square-size;
                    height: parent.square-size;
                    background: white;
                    x: parent.width * 55%;
                    y: parent.height * 45% - parent.square-size / 2;
                    border-color: #000000;
                    border-width: current-theme.piece-border;
                }
            }
            Button { 
                button-text: "1";
                button-font-weight: 700;
                button-color: current-theme.game-text-color;
                is-activated: mode == "edit-fixed-numbers";
                clicked => {
                    mode = "edit-fixed-numbers";
                    root.set-mode(mode);
                }
            }
            Button {
                button-text: "Save";
                button-color: current-theme.game-text-color;
                clicked => {
                    root.save-game();
                }
            }

            // Rectangle { }
            Text {
                text: " Play: ";
                font-size: parent.height * 40%;
                // font-size: parent.height;
            }
            Button { 
                button-text: "1";
                button-color: current-theme.game-text-color;
                is-activated: mode == "play-enter-numbers";
                clicked => { 
                    mode = "play-enter-numbers";
                    root.set-mode(mode);
                }
            }
            Button { 
                // button-text: "1 2 3\n4 5 6\n7 8 9";
                // button-font-size-percentage: 25%;
                button-color: current-theme.game-text-color;
                is-activated: mode == "play-enter-small-numbers";
                clicked => { 
                    mode = "play-enter-small-numbers";
                    root.set-mode(mode);
                }
                for j in [0,1,2,3,4,5,6,7,8] : Rectangle {
                    Text {
                        property<length> cell-size: min(parent.width, parent.height) * 85%; 
                        text: j+1;
                        font-size: cell-size / 3;
                        font-family: current-theme.piece-text-font-family;
                        x: parent.width / 2 - cell-size / 2 + (cell-size / 3) * mod(j, 3);
                        y: parent.height / 2 - cell-size / 2 + (cell-size / 3) * floor(j / 3);
                        width: cell-size / 3;
                        height: cell-size / 3;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                    }
                }
            }

            // Button {
            //     button-text: "Generate";
            //     button-color: current-theme.game-text-color;
            //     clicked => {
            //         root.generate-puzzle();
            //     }
            // }

            Button {
                button-text: "Solve";
                button-color: current-theme.game-text-color;
                clicked => {
                    root.solve-puzzle();
                }
            }
        }
    }
}
