/* LICENSE BEGIN
    This file is part of SixtyFPS-Str8ts, a demo implementing the
    Str8ts puzzle in the SixtyFPS framework. Based on the SixtyFPS
    Slide Puzzle demo.
    Copyright (c) 2021 Vincent BÃ¼rgin <v.buergin@gmx.de>

    SPDX-License-Identifier: GPL-3.0-only
LICENSE END */

// Represents a cell in the puzzle
struct Cell := {
    // col/row position of the tile in the puzzle
    pos-x: int,
    pos-y: int,
    index: int,
    value: int,
    small-values: [bool], // For each of the 9 small values: present or not?
    is-white: bool,
    is-fixed: bool,
    is-editing: bool,
    is-valid-in-row: bool,
    is-valid-in-straight: bool
}

// Represents the style information
struct Theme := {
    name: string,
    window-background-color: brush,
    game-background-color: brush,
    game-border: length,
    game-border-color: color,
    game-radius: length,
    game-text-color: color,
    game-highlight-color: color,
    cell-border: length,
    cell-border-color: color,
    cell-background-color-white: color,
    cell-background-color-black: color,
    cell-background-color-solved: color,
    cell-background-color-editing-white: color,
    cell-background-color-editing-black: color,
    cell-background-color-wrong: color,
    cell-text-color-black: color,
    cell-text-color-white: color,
    cell-text-color-wrong: color,
    cell-text-weight-fixed-value: int,
    cell-text-weight-nonfixed-value: int,
    cell-text-font-family: string,
    cell-radius: length,
    /// Ratio of the cell size
    cell-spacing: float,
    cells-outer-border: length,
}

// Button in the style of the Checkbox from the slide puzzle example
Button := Rectangle {
    callback clicked();
    property<color> button-color;
    property<string> button-text;
    property<int> button-font-weight: 400;
    property<float> button-font-size-percentage: 80%;
    property<bool> is-activated;
    property<color> hover-color: #f5f5f5;
    property<color> activated-color: #f0f2a4;
    property<length> button-border-radius: 2px;

    // Visible if button is hovered or permanently activated
    hover-activated-rect := Rectangle {
        background: ta.has-hover ? hover-color : activated-color;
        x: - (width - parent.width) / 2;
        y: - (height - parent.height) / 2;
        property <length> hover-additional-border: 15% * min(root.width, root.height);
        width: ta.has-hover ? root.width + hover-additional-border : is-activated ? root.width : 0px;
        height: ta.has-hover ? root.height + hover-additional-border : is-activated ? root.height : 0px;
        border-radius: 10% * height;
    }

    // Holds button border and text
    button-rect := Rectangle {
        border-width: height * 5%;
        border-color: button-color;
        border-radius: button-border-radius;

        Text {
            width: parent.width;
            height:  parent.height * 80%;
            x: parent.width / 2 - width / 2;
            y: parent.height * 10%;
            font-weight: button-font-weight;

            text: button-text;
            font-size: height * button-font-size-percentage;
            color: black;
            animate color { duration: 200ms; }
            vertical-alignment: center;
            horizontal-alignment: center;
        }
        ta := TouchArea {
            clicked => {
                root.clicked();
            }
        }
    }
}

// Main window component
export MainWindow := Window {
    title: "Str8ts Puzzle - SixtyFPS Demo";

    callback cell-clicked(int);
    callback cell-key-pressed(int, KeyEvent);
    callback reset();
    callback set-mode(string);
    callback solve-puzzle();
    callback save-game();
    callback generate-puzzle();
    property <string> mode: "none"; // "none", "edit-black-white", "edit-fixed-numbers", "play-enter-numbers", "play-enter-small-numbers"
    property <[Cell]> cells: [];
    property <bool> was-just-solved;

    // Default (and currently only) theme
    property <Theme> current-theme: {
        name: "SIMPLE",
        window-background-color: #ffffff,
        game-background-color: #ffffff,
        game-border: 2px,
        game-border-color: #000000,
        game-radius: 2px,
        game-text-color: #858585,
        game-highlight-color: #1d6aaa,
        cell-border: 1px,
        cell-border-color: #000000,
        cell-background-color-white: #ffffff,
        cell-background-color-black: #000000,
        cell-background-color-solved: #99fb99,
        cell-background-color-editing-white: #f0f2a4,
        cell-background-color-editing-black: #535339,
        cell-background-color-wrong: #ff5c5c,
        cell-text-color-black: #ffffff,
        cell-text-color-white: #000000,
        cell-text-color-wrong:  #df0000,
        cell-text-weight-fixed-value: 700,
        cell-text-weight-nonfixed-value: 550,
        cell-radius: 5px,
        cell-text-font-family: default-font-family,
        /// Ratio of the cell size
        cell-spacing: 0%,
        cells-outer-border: 1px,
    };

    property<length> cells-size: min(width, height) / 13;
    property<length> cells-spacing: cells-size * current-theme.cell-spacing;

    Rectangle {
        background: current-theme.window-background-color;
        animate background { duration: 500ms; easing: ease-out; }
    }

    // Border around game board and other UI elements
    Rectangle {
        background: current-theme.game-background-color;
        border-color: current-theme.game-text-color;
        border-width: current-theme.game-border;
        border-radius: current-theme.game-radius;
        width: cells-size * 10.35;
        height: cells-size * 12;
        x: (parent.width - width)/2;
        y: (parent.height - height)/2;
        animate background, border-color, border-width, border-radius { duration: 500ms; easing: ease-out; }

        // Border around game board
        Rectangle {
            x: (parent.width - width)/2;
            y: (parent.height - height)/2;
            width: 9*cells-size + 8*cells-spacing + 2*current-theme.cells-outer-border;
            height: width;
            border-width: current-theme.cells-outer-border;
            border-color: current-theme.game-border-color;

            // Game board
            Rectangle {
                x: current-theme.cells-outer-border;
                y: current-theme.cells-outer-border;
                width: parent.width - 2*current-theme.cells-outer-border;
                height: parent.height - 2*current-theme.cells-outer-border;
                // To prevent the background from showing through between tiles:
                background: current-theme.cell-border-color;

                // Cells of the gameboard
                for p[i] in cells : Rectangle {
                    property<float> px: p.pos-x;
                    property<float> py: p.pos-y;
                    x: py * (cells-size + cells-spacing);
                    y: px * (cells-size + cells-spacing);
                    width: cells-size;
                    height: cells-size;

                    // Make sure circle animation doesn't go out of bounds
                    clip: true;

                    // Convention: no value => value = -1 (.60 language has no Option<..> type)
                    property<string> value: p.value > 0 ? p.value : "";

                    Rectangle {
                        border-color: current-theme.cell-border-color;
                        border-width: current-theme.cell-border;

                        // Different states of the cell => different backgrounds:
                        states [ 
                            was-just-solved when root.was-just-solved && p.is-white : {
                                // ...when puzzle was just solved
                                background: current-theme.cell-background-color-solved;
                            }
                            is-editing-white when p.is-editing && p.is-white : {
                                // ...when editing a white cell
                                background: current-theme.cell-background-color-editing-white;
                            }
                            is-editing-black when p.is-editing && !p.is-white : {
                                // ...when editing a black cell
                                background: current-theme.cell-background-color-editing-black;
                            }
                            is-invalid-in-straight when !p.is-valid-in-straight : {
                                // ...when straight is invalid
                                background: current-theme.cell-background-color-wrong;
                            }
                            is-white when p.is-white : {
                                // ...white cell default
                                background: current-theme.cell-background-color-white;
                            }
                            is-black when !p.is-white : {
                                // ...black cell default
                                background: current-theme.cell-background-color-black;
                            }
                        ]

                        transitions [ 
                            in was-just-solved: {
                                // Quickly flash when game was just solved...
                                animate background { duration: 400ms; easing: ease-in; }
                            }
                            out was-just-solved: {
                                // ...then go back to normal (is reset by timer)
                                animate background { duration: 200ms; easing: ease-out; }
                            }
                            in is-invalid-in-straight : { animate background { duration: 40ms; } }
                            in is-editing-white : { animate background { duration: 40ms; } }
                            in is-editing-black : { animate background { duration: 40ms; } }
                            in is-white : { animate background { duration: 100ms; easing: ease-in-out;  } }
                            in is-black : { animate background { duration: 100ms; easing: ease-in-out; } }
                        ]
                    }

                    // Cell value displayed as text
                    Text {
                        text: value;
                        font-size: cells-size / 3;
                        font-weight: p.is-fixed ? current-theme.cell-text-weight-fixed-value 
                            : current-theme.cell-text-weight-nonfixed-value;
                        font-family: current-theme.cell-text-font-family;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                        width: 100%;
                        height: 100%;
                        animate color { duration: 200ms; }

                        // Different states of the cell => different font colors:
                        states [
                            is-invalid-in-row when !p.is-valid-in-row : {
                                // ...when the value is duplicate in row/column
                                color: current-theme.cell-text-color-wrong;
                            }
                            is-white when p.is-white : {
                                // ...default white cell
                                color: current-theme.cell-text-color-white;
                            }
                            is-black when !p.is-white : {
                                // ...default black cell
                                color: current-theme.cell-text-color-black;
                            }
                        ]
                    }

                    // Small numbers in the cell if the cell has no value
                    for small-val[j] in p.small-values : Rectangle {
                        if value <= 0 && p.is-white && small-val: Text {
                            text: j+1;
                            font-size: cells-size / 6;
                            font-family: current-theme.cell-text-font-family;
                            x: (parent.width / 3) * mod(j, 3);
                            y: (parent.height / 3) * floor(j / 3);
                            width: parent.width / 3;
                            height: parent.height / 3;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                        }
                    }

                    // Capture clicks on the cell
                    touch := TouchArea {
                        clicked => { root.cell-clicked(i); }
                    }

                    // Capture key presses on the cell
                    FocusScope {
                        has-focus: p.is-editing;
                        key-pressed(e) => { root.cell-key-pressed(i, e); accept }
                    }

                    // Display circular, growing shadow when cell is pressed
                    shadow := Rectangle {
                        circle := Rectangle {
                            height: width;
                            border-radius: width/2;
                            background: #0002;
                            x: touch.pressed-x - width/2;
                            y: touch.pressed-y - width/2;
                        }
                    }

                    // Animation of the circular shadow
                    states [
                        pressed when touch.pressed : {
                            shadow.color: #0002;
                            circle.width: shadow.width * 2 * 1.4142;
                        }
                        hover when touch.has-hover: {
                            shadow.color: #0000000d;
                        }

                    ]
                    transitions [
                        in pressed : {
                            animate shadow.color { duration: 50ms; }
                            animate circle.width { duration: 2s; easing: ease-out; }
                        }
                        out pressed : {
                            animate shadow.color { duration: 50ms; }
                        }
                    ]
                }
            }
        }

        // Row of buttons to switch between game modes, etc.
        HorizontalLayout {
            height: cells-size;
            y: parent.height - cells-size;
            width: parent.width;
            padding: height * 25%;
            spacing: 10px;

            // Restart button (function right now: clears everything)
            Text {
                text: " â» ";
                font-size: parent.height * 40%;
                color: current-theme.game-highlight-color;
                vertical-alignment: center;
                TouchArea {
                    clicked => { root.reset(); }
                }
            }
            
            Text { 
                text: "Edit:";
                font-size: parent.height * 40%;
            }
            // Activates changing between black and white cells
            Button { 
                button-color: current-theme.game-text-color;
                is-activated: mode == "edit-black-white";
                clicked => { 
                    mode = "edit-black-white";
                    root.set-mode(mode);  
                }
                // Black and white square as button icon
                property<length> square-size: min(width, height) * 45%;
                Rectangle {
                    x: parent.width * 45% - parent.square-size;
                    y: parent.height * 45% - parent.square-size / 2;
                    background: current-theme.cell-background-color-black;
                    width: parent.square-size;
                    height: parent.square-size;
                    border-color: current-theme.cell-border-color;
                    border-width: current-theme.cell-border;
                }
                Rectangle {
                    x: parent.width * 55%;
                    y: parent.height * 45% - parent.square-size / 2;
                    background: current-theme.cell-background-color-white;
                    width: parent.square-size;
                    height: parent.square-size;
                    border-color: current-theme.cell-border-color;
                    border-width: current-theme.cell-border;
                }
            }
            // Activates editing fixed numbers
            Button { 
                button-text: "1";
                button-font-weight: 700;
                button-color: current-theme.game-text-color;
                is-activated: mode == "edit-fixed-numbers";
                clicked => {
                    mode = "edit-fixed-numbers";
                    root.set-mode(mode);
                }
            }
            // Saves the game to game_state.json
            Button {
                button-text: "Save";
                button-color: current-theme.game-text-color;
                clicked => {
                    root.save-game();
                }
            }

            Text {
                text: "Play:";
                font-size: parent.height * 40%;
            }
            // Activates entering (non-fixed) numbers
            Button { 
                button-text: "1";
                button-color: current-theme.game-text-color;
                is-activated: mode == "play-enter-numbers";
                clicked => { 
                    mode = "play-enter-numbers";
                    root.set-mode(mode);
                }
            }
            // Activates entering small numbers
            Button {
                button-color: current-theme.game-text-color;
                is-activated: mode == "play-enter-small-numbers";
                clicked => { 
                    mode = "play-enter-small-numbers";
                    root.set-mode(mode);
                }
                // Small number 1-9 as button icon
                for j in [0,1,2,3,4,5,6,7,8] : Rectangle {
                    Text {
                        property<length> cell-size: min(parent.width, parent.height) * 85%; 
                        text: j+1;
                        font-size: cell-size / 3;
                        font-family: current-theme.cell-text-font-family;
                        x: parent.width / 2 - cell-size / 2 + (cell-size / 3) * mod(j, 3);
                        y: parent.height / 2 - cell-size / 2 + (cell-size / 3) * floor(j / 3);
                        width: cell-size / 3;
                        height: cell-size / 3;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                    }
                }
            }

            // Generates a puzzle: not functional yet
            // Button {
            //     button-text: "Generate";
            //     button-color: current-theme.game-text-color;
            //     clicked => {
            //         root.generate-puzzle();
            //     }
            // }

            // Solves the game
            Button {
                button-text: "Solve";
                button-color: current-theme.game-text-color;
                clicked => {
                    root.solve-puzzle();
                }
            }
        }
    }
}
